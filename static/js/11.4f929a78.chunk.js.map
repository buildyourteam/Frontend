{"version":3,"sources":["components/List/Sort.jsx","hook/peopleTs/usePeopleListTs.ts","pages/PeopleList.js"],"names":["useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","search","width","ProjectSort","role","setRole","region","setRegion","stack","setStack","setSearch","getApi","handleChange","event","target","name","value","getPage","a","params","classes","container","item","xs","sm","className","onChange","displayEmpty","disabled","style","display","variant","label","height","onClick","PeopleSort","grade","setGrade","require","usePeopleListStateTs","useState","peopleList","setPeopleList","number","size","totalElements","totalPages","page","setPage","useRequest","peopleListApi","getPeopleList","peopleListPromise","run","getWantedPeopleList","peoplePage","WantedPeopleListPromise","peopleAction","useWantedPeopleListEffectTs","useAlert","alertAction","useEffect","fulfilled","data","_embedded","rejected","error","PeopleList","getPeopleListFetch","length","map","index","key","url","userId","id","count","e"],"mappings":"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","file":"static/js/11.4f929a78.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormHelperText,\r\n  OutlinedInput,\r\n  Grid,\r\n  makeStyles,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  search: {\r\n    margin: theme.spacing(1),\r\n    width: \"30ch\",\r\n  },\r\n}));\r\nexport function ProjectSort({\r\n  role,\r\n  setRole,\r\n  region,\r\n  setRegion,\r\n  stack,\r\n  setStack,\r\n  search,\r\n  setSearch,\r\n  getApi,\r\n}) {\r\n  const handleChange = (event) => {\r\n    if (event.target.name === \"role\") {\r\n      setRole(event.target.value);\r\n    } else if (event.target.name === \"region\") {\r\n      setRegion(event.target.value);\r\n    } else {\r\n      setStack(event.target.value);\r\n    }\r\n  };\r\n\r\n  const getPage = async (role, region, stack) => {\r\n    let params = \"\";\r\n    if (role !== \"\") params += `&role=${role}`;\r\n    if (region !== \"\") params += `&region=${region}`;\r\n    if (stack !== \"\") params += `&stack=${stack}`;\r\n    await getApi(0, params);\r\n  };\r\n\r\n  const handleChangeSearch = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={6} sm={2}>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n              name=\"role\"\r\n              value={role}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                역할\r\n              </MenuItem>\r\n              <MenuItem value=\"DEVELOPER\">developer</MenuItem>\r\n              <MenuItem value=\"DESIGNER\">designer</MenuItem>\r\n              <MenuItem value=\"PLANNER\">director</MenuItem>\r\n              <MenuItem value=\"ETC\">etc.</MenuItem>\r\n            </Select>\r\n            <FormHelperText>role</FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6} sm={2}>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n              name=\"region\"\r\n              value={region}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                지역\r\n              </MenuItem>\r\n              <MenuItem value=\"Seoul\">서울</MenuItem>\r\n              <MenuItem value=\"Gunggi\">경기</MenuItem>\r\n              <MenuItem value=\"Busan\">부산</MenuItem>\r\n            </Select>\r\n            <FormHelperText>region</FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6} sm={2}>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n              name=\"stack\"\r\n              value={stack}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                기술스택\r\n              </MenuItem>\r\n              <MenuItem value=\"ReactJS\">ReactJS</MenuItem>\r\n              <MenuItem value=\"SPRINGBOOT\">SPRINGBOOT</MenuItem>\r\n              <MenuItem value=\"PHP\">PHP</MenuItem>\r\n            </Select>\r\n            <FormHelperText>stack</FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={5} style={{ display: \"flex\" }}>\r\n          <FormControl\r\n            style={{ width: \"100%\" }}\r\n            variant=\"outlined\"\r\n            className={classes.search}\r\n          >\r\n            <InputLabel>Search</InputLabel>\r\n            <OutlinedInput\r\n              value={search}\r\n              onChange={handleChangeSearch}\r\n              label=\"Search\"\r\n            />\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={1} style={{ display: \"flex\" }}>\r\n          <Button\r\n            style={{ height: \"auto\" }}\r\n            onClick={() => getPage(role, region, stack)}\r\n          >\r\n            search\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function PeopleSort({\r\n  role,\r\n  setRole,\r\n  region,\r\n  setRegion,\r\n  grade,\r\n  setGrade,\r\n  search,\r\n  setSearch,\r\n  getApi,\r\n}) {\r\n  const handleChange = (event) => {\r\n    if (event.target.name === \"role\") {\r\n      setRole(event.target.value);\r\n    } else if (event.target.name === \"region\") {\r\n      setRegion(event.target.value);\r\n    } else {\r\n      setGrade(event.target.value);\r\n    }\r\n  };\r\n\r\n  const getPage = async (role, region, grade) => {\r\n    let params = \"\";\r\n    if (role !== \"\") params += `&role=${role}`;\r\n    if (region !== \"\") params += `&region=${region}`;\r\n    if (grade !== \"\") params += `&grade=${grade}`;\r\n    await getApi(0, params);\r\n  };\r\n\r\n  const handleChangeSearch = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={6} sm={2}>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n              disabled // tmp\r\n              name=\"role\"\r\n              value={role}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                역할\r\n              </MenuItem>\r\n              <MenuItem value=\"LEADER\">leader</MenuItem>\r\n              <MenuItem value=\"DEVELOPER\">developer</MenuItem>\r\n              <MenuItem value=\"DESIGNER\">designer</MenuItem>\r\n              <MenuItem value=\"PLANNER\">director</MenuItem>\r\n              <MenuItem value=\"ETC\">etc.</MenuItem>\r\n            </Select>\r\n            <FormHelperText>role</FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6} sm={2}>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n              disabled // tmp\r\n              name=\"grade\"\r\n              value={grade}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                레벨\r\n              </MenuItem>\r\n              <MenuItem value=\"0\">0</MenuItem>\r\n              <MenuItem value=\"1\">1</MenuItem>\r\n              <MenuItem value=\"2\">2</MenuItem>\r\n            </Select>\r\n            <FormHelperText>grade</FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={6} sm={2}>\r\n          <FormControl className={classes.formControl}>\r\n            <Select\r\n              disabled // tmp\r\n              name=\"region\"\r\n              value={region}\r\n              onChange={handleChange}\r\n              displayEmpty\r\n            >\r\n              <MenuItem value=\"\" disabled>\r\n                지역\r\n              </MenuItem>\r\n              <MenuItem value=\"SEOUL\">서울</MenuItem>\r\n              <MenuItem value=\"GYEONGGI\">경기</MenuItem>\r\n              <MenuItem value=\"Busan\">부산</MenuItem>\r\n            </Select>\r\n            <FormHelperText>region</FormHelperText>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={5} style={{ display: \"flex\" }}>\r\n          <FormControl\r\n            variant=\"outlined\"\r\n            style={{ width: \"100%\" }}\r\n            className={classes.search}\r\n          >\r\n            <InputLabel>Search</InputLabel>\r\n            <OutlinedInput\r\n              disabled // tmp\r\n              value={search}\r\n              onChange={handleChangeSearch}\r\n              label=\"Search\"\r\n            />\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item xs={1} style={{ display: \"flex\" }}>\r\n          <Button\r\n            disabled // tmp\r\n            onClick={() => getPage(role, region, grade)}\r\n          >\r\n            search\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport { peopleListApi } from \"../api\";\r\nimport { useRequest, useAlert } from \"..\";\r\nimport { RequestState } from \"../useRequest\";\r\nconst axios = require(\"axios\");\r\n\r\ntype pageType = {\r\n  number: number;\r\n  size: number;\r\n  totalElements: number;\r\n  totalPages: number;\r\n};\r\n\r\ntype peopleListType = {\r\n  userId: String;\r\n  userName: String;\r\n  stacks: Array<String>;\r\n  area: String;\r\n  level: number;\r\n  _links: {\r\n    self: {\r\n      href: String;\r\n    };\r\n    profileImage: {\r\n      href: String;\r\n    };\r\n  };\r\n};\r\n\r\ntype peoplePage = {\r\n  WantedPeopleListPromise: RequestState;\r\n  peopleListPromise: RequestState;\r\n  peopleList: peopleListType[];\r\n  role: string;\r\n  region: string;\r\n  search: string;\r\n  page: pageType;\r\n  grade: string;\r\n};\r\n\r\ntype peopleAction = {\r\n  getPeopleList: (pageNumber: number, params: Object[]) => Promise<void>;\r\n  getWantedPeopleList: (pageNumber: number) => Promise<void>;\r\n  setPeopleList: Dispatch<SetStateAction<peopleListType[]>>;\r\n  setPage: Dispatch<SetStateAction<pageType>>;\r\n  setRole: Dispatch<SetStateAction<string>>;\r\n  setRegion: Dispatch<SetStateAction<string>>;\r\n  setSearch: Dispatch<SetStateAction<string>>;\r\n  setGrade: Dispatch<SetStateAction<string>>;\r\n};\r\n\r\ntype peopleState = {\r\n  peoplePage: peoplePage;\r\n  peopleAction: peopleAction;\r\n};\r\n\r\nexport function usePeopleListStateTs(): peopleState {\r\n  const [peopleList, setPeopleList] = useState<peopleListType[] | []>([]);\r\n  const [page, setPage] = useState<pageType>({\r\n    number: 0,\r\n    size: 0,\r\n    totalElements: 0,\r\n    totalPages: 0,\r\n  });\r\n  const [role, setRole] = useState<string>(\"\");\r\n  const [region, setRegion] = useState<string>(\"\");\r\n  const [grade, setGrade] = useState<string>(\"\");\r\n  const [search, setSearch] = useState<string>(\"\");\r\n  const [peopleListPromise, { run: getPeopleList }] = useRequest(\r\n    peopleListApi().getPeopleList,\r\n  );\r\n\r\n  const [WantedPeopleListPromise, { run: getWantedPeopleList }] = useRequest(\r\n    peopleListApi().getWantedPeopleList,\r\n  );\r\n  const peoplePage: peoplePage = {\r\n    WantedPeopleListPromise,\r\n    peopleListPromise,\r\n    peopleList,\r\n    page,\r\n    role,\r\n    region,\r\n    search,\r\n    grade,\r\n  };\r\n\r\n  const peopleAction: peopleAction = {\r\n    setPeopleList,\r\n    setPage,\r\n    setRole,\r\n    setRegion,\r\n    setSearch,\r\n    setGrade,\r\n    getPeopleList,\r\n    getWantedPeopleList,\r\n  };\r\n\r\n  return { peoplePage, peopleAction };\r\n}\r\n\r\nexport function usePeopleListEffectTs(\r\n  peoplePage: peoplePage,\r\n  peopleAction: peopleAction,\r\n) {\r\n  useEffect(() => {\r\n    if (peoplePage.peopleListPromise.fulfilled) {\r\n      if (\"_embedded\" in peoplePage.peopleListPromise.data) {\r\n        peopleAction.setPeopleList(\r\n          peoplePage.peopleListPromise.data._embedded.peopleList,\r\n        );\r\n      }\r\n    }\r\n  }, [peoplePage.peopleListPromise.fulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (peoplePage.peopleListPromise.rejected) {\r\n      if (peoplePage.peopleListPromise.error) {\r\n        peopleAction.setPeopleList([]);\r\n      }\r\n    }\r\n  }, [peoplePage.peopleListPromise.rejected]);\r\n}\r\n\r\nexport function useWantedPeopleListEffectTs(\r\n  peoplePage: peoplePage,\r\n  peopleAction: peopleAction,\r\n) {\r\n  const { alertAction } = useAlert();\r\n  useEffect(() => {\r\n    if (peoplePage.WantedPeopleListPromise.fulfilled) {\r\n      if (\"_embedded\" in peoplePage.WantedPeopleListPromise.data) {\r\n        peopleAction.setPeopleList(\r\n          peoplePage.WantedPeopleListPromise.data._embedded.peopleList,\r\n        );\r\n      }\r\n    }\r\n  }, [peoplePage.WantedPeopleListPromise.fulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (peoplePage.WantedPeopleListPromise.rejected) {\r\n      if (peoplePage.WantedPeopleListPromise.error) {\r\n        peopleAction.setPeopleList([]);\r\n      }\r\n    }\r\n  }, [peoplePage.WantedPeopleListPromise.rejected]);\r\n\r\n  useEffect(() => {\r\n    peopleAction.getWantedPeopleList(0);\r\n  }, []);\r\n}\r\n","import React, { useState } from \"react\";\r\nimport PeopleBox from \"../components/People/PeopleBox\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport { PeopleSort } from \"../components/List/Sort\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport { Layout } from \"../components\";\r\nimport {\r\n  usePeopleListStateTs,\r\n  useWantedPeopleListEffectTs,\r\n} from \"../hook/peopleTs\";\r\n\r\nexport default function PeopleList() {\r\n  const { peoplePage, peopleAction } = usePeopleListStateTs();\r\n  useWantedPeopleListEffectTs(peoplePage, peopleAction);\r\n\r\n  return (\r\n    <Layout>\r\n      <hr />\r\n      <PeopleSort\r\n        role={peoplePage.role}\r\n        setRole={peoplePage.setRole}\r\n        grade={peoplePage.grade}\r\n        setGrade={peoplePage.setGrade}\r\n        region={peoplePage.region}\r\n        setRegion={peoplePage.setRegion}\r\n        search={peoplePage.search}\r\n        setSearch={peoplePage.setSearch}\r\n        getApi={peopleAction.getPeopleListFetch}\r\n      />\r\n      <hr />\r\n\r\n      <Row xs=\"12\">\r\n        {peoplePage.peopleList.length !== 0 &&\r\n          peoplePage.peopleList.map((value, index) => {\r\n            return (\r\n              <Col xs=\"2\" key={index}>\r\n                <PeopleBox url={`/profile/${value.userId}`} data={value} />\r\n              </Col>\r\n            );\r\n          })}\r\n      </Row>\r\n      <div id=\"pagination_div\">\r\n        <Pagination\r\n          id=\"pagination\"\r\n          count={peoplePage.page.totalPages}\r\n          onChange={(e, page) => {\r\n            let params = \"\";\r\n            if (peoplePage.role !== \"\") params += `&role=${peoplePage.role}`;\r\n            if (peoplePage.grade !== \"\") params += `&grade=${peoplePage.grade}`;\r\n            if (peoplePage.region !== \"\")\r\n              params += `&region=${peoplePage.region}`;\r\n            peopleAction.getPeopleListFetch(page - 1, params);\r\n          }}\r\n        />\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n"],"sourceRoot":""}