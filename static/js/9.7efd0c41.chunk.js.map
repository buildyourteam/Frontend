{"version":3,"sources":["hook/profile/useProfileProject.js","hook/profile/useProfileProjectModify.js","components/People/Profile/ProfileProjects/ModifyPlanProjects.js","components/People/Profile/ProfileProjects/RunningProjects.js","components/People/Profile/ProfileProjects/ModifyEndedProjects.js","components/People/Profile/ProfileProjects/EndedProjects.js","components/People/Profile/ProfileProjects/PlanProjects.js","hook/profile/useProfileRecruit.js","components/People/Profile/RecruitModal.js","components/People/Profile/Invitation/DetailModal.js","hook/profile/useInvitation.js","components/People/Profile/Invitation/InvitationBox.js","components/People/Profile/Invitation/InvitationModal.js","pages/Profile.jsx"],"names":["useProfileProject","resGetProject","getProjectFulfilled","getProjectRejected","getProjectError","getProjectApi","setList","hiding","userId","check","useSelector","state","profile","isHideChange","useEffect","page","totalElements","_embedded","projectList","useProfileProjectModify","getHideProjectApi","resHideProject","hideProjectFulfilled","hideProjectRejected","hideProjectError","resDisplayProject","displayProjectFulfilled","displayProjectRejected","displayProjectError","list","hideList","setHideList","moveData","filter","a","projectId","concat","ModifyPlanProjects","useState","getHideProject","planProjectApi","hideProjectApi","hideProject","displayProject","useRequest","data","fulfilled","pending","rejected","error","run","hideProjectFetchApi","displayProjectApi","className","Row","xs","map","value","index","Col","key","Button","onClick","id","ProjectBox","url","RunningProjects","dispatch","useDispatch","myId","login","setHiding","getProject","runningProjectApi","getProjectPending","setHideChange","ModifyEndedProjects","endedProjectApi","EndedProjects","PlanProjects","useProfileRecruit","getProjectData","getProjecsError","postRecruitData","postRecruitFulfilled","postRecruitRejected","postRecruitError","toggleNested","setNestedMessage","plannedProjects","setPlannedProjects","alertAction","useAlert","open","response","message","console","log","status","RecruitModal","modal","toggle","introduction","role","recruitState","setRecruitState","nestedModal","setNestedModal","closeAll","setCloseAll","nestedMessage","getAllPlannedProject","postRecruit","sendRecruitPeopleApi","postRecruitApi","handleChange","event","target","name","Modal","isOpen","ModalHeader","FormControl","InputLabel","Select","onChange","pj","MenuItem","projectName","TextField","label","multiline","rows","variant","ModalFooter","color","onClosed","undefined","ModalBody","DetailModal","pid","userName","invitaionDetail","setInvitaionDetail","activityName","setActivityName","invitationDetailApi","getInvitationDetail","putInvitationAccept","deleteInvitationReject","getInvitationDetailApi","putFulfilled","putInvitationAcceptApi","reject","deleteFulfilled","deleteInvitationRejectApi","handleAccept","handleReject","useInvitationDetailEffect","Badge","pill","Card","body","style","height","CardText","InvitationBox","detailModal","setDetailModal","detailModalToggle","CardTitle","InvitationModal","invitationList","setInvitationList","isError","errorMessage","noList","setNoList","noticeNoList","getInvitationList","invitationListApi","getInvitationListApi","recruitDtoList","useInvitationEffect","invitation","Profile","useLocation","pathname","split","modifying","setModifying","modifyToggle","invitationModal","setInvitationModal","invitationToggle","stacks","contact","area","grade","info","setInfo","imgUrl","isImgChange","imgState","setImgState","setModal","recruitToggle","activeTab","setActiveTab","tabToggle","tab","Nav","tabs","NavItem","NavLink","classnames","active","TabContent","TabPane","tabId"],"mappings":"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","file":"static/js/9.7efd0c41.chunk.js","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst useProfileProject = (\r\n  resGetProject,\r\n  getProjectFulfilled,\r\n  getProjectRejected,\r\n  getProjectError,\r\n  getProjectApi,\r\n\r\n  setList,\r\n  hiding,\r\n\r\n  userId,\r\n) => {\r\n  const check = useSelector((state) => state.profile.isHideChange);\r\n\r\n  // hide 변경사항이 있으면 다시 get요청\r\n  useEffect(() => {\r\n    if (check) {\r\n      getProjectApi(userId);\r\n    }\r\n  }, [check, userId]);\r\n\r\n  // 요청 성공시\r\n  useEffect(() => {\r\n    if (getProjectFulfilled) {\r\n      if (resGetProject.page.totalElements) {\r\n        setList(resGetProject._embedded.projectList);\r\n      }\r\n    }\r\n  }, [getProjectFulfilled]);\r\n};\r\n\r\nexport default useProfileProject;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useProfileProjectModify = (\r\n  resGetProject,\r\n  getProjectFulfilled,\r\n  getProjectRejected,\r\n  getProjectError,\r\n  getHideProjectApi,\r\n\r\n  resHideProject,\r\n  hideProjectFulfilled,\r\n  hideProjectRejected,\r\n  hideProjectError,\r\n\r\n  resDisplayProject,\r\n  displayProjectFulfilled,\r\n  displayProjectRejected,\r\n  displayProjectError,\r\n\r\n  userId,\r\n\r\n  list,\r\n  setList,\r\n\r\n  hideList,\r\n  setHideList,\r\n) => {\r\n  // 처음 로딩 시 숨겨진 프로젝트 목록 불러오기\r\n  useEffect(() => {\r\n    getHideProjectApi(userId);\r\n  }, []);\r\n\r\n  // 불러오기 성공시 , 불러온 내부에 프로젝트 데이터가 있으면 숨김 state에 저장\r\n  useEffect(() => {\r\n    if (getProjectFulfilled) {\r\n      if (resGetProject.page.totalElements) {\r\n        setHideList(resGetProject._embedded.projectList);\r\n      }\r\n    }\r\n  }, [getProjectFulfilled]);\r\n\r\n  // 숨기기 요청 성공시\r\n  useEffect(() => {\r\n    if (hideProjectFulfilled) {\r\n      let moveData = {};\r\n      // 일반 state list에서 선택한 project 제거\r\n      setList(\r\n        list.filter((a) => {\r\n          if (a.projectId === resHideProject.projectId) {\r\n            moveData = a;\r\n            return false;\r\n          }\r\n          return true;\r\n        }),\r\n      );\r\n\r\n      // 숨김 state list에서 위에서 선택된 project 추가\r\n      setHideList((hideList) => {\r\n        const newList = hideList.concat(moveData);\r\n        return newList;\r\n      });\r\n    }\r\n  }, [hideProjectFulfilled]);\r\n\r\n  // 보여주기 요청 성공시\r\n  useEffect(() => {\r\n    if (displayProjectFulfilled) {\r\n      let moveData = {};\r\n      // 숨김 state list에서 선택한 project 제거\r\n      setHideList(\r\n        hideList.filter((a) => {\r\n          if (a.projectId === resDisplayProject.projectId) {\r\n            moveData = a;\r\n            return false;\r\n          }\r\n          return true;\r\n        }),\r\n      );\r\n      // 일반 state list에 선택된 프로젝트 추가\r\n      setList((list) => {\r\n        const newList = list.concat(moveData);\r\n        return newList;\r\n      });\r\n    }\r\n  }, [displayProjectFulfilled]);\r\n};\r\n\r\nexport default useProfileProjectModify;\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\nimport { useRequest } from \"../../../../hook/useRequest\";\r\nimport ProjectBox from \"../../../Project/ProjectBox\";\r\nimport { planProjectApi, hideProjectApi } from \"../../../../hook/api\";\r\nimport useProfileProjectModify from \"../../../../hook/profile/useProfileProjectModify\";\r\nimport \"./profileProject.css\";\r\n\r\nconst ModifyPlanProjects = ({ list, setList, userId }) => {\r\n  const [hideList, setHideList] = useState([]);\r\n  const { getHideProject } = planProjectApi();\r\n  const { hideProject, displayProject } = hideProjectApi();\r\n  const [\r\n    {\r\n      data: resGetProject,\r\n      fulfilled: getProjectFulfilled,\r\n      pending: getProjectPending,\r\n      rejected: getProjectRejected,\r\n      error: getProjectError,\r\n    },\r\n    { run: getHideProjectApi },\r\n  ] = useRequest(getHideProject);\r\n\r\n  const [\r\n    {\r\n      data: resHideProject,\r\n      fulfilled: hideProjectFulfilled,\r\n      pending: hideProjectPending,\r\n      rejected: hideProjectRejected,\r\n      error: hideProjectError,\r\n    },\r\n    { run: hideProjectFetchApi },\r\n  ] = useRequest(hideProject);\r\n\r\n  const [\r\n    {\r\n      data: resDisplayProject,\r\n      fulfilled: displayProjectFulfilled,\r\n      pending: displayProjectPending,\r\n      rejected: displayProjectRejected,\r\n      error: displayProjectError,\r\n    },\r\n    { run: displayProjectApi },\r\n  ] = useRequest(displayProject);\r\n\r\n  useProfileProjectModify(\r\n    resGetProject,\r\n    getProjectFulfilled,\r\n    getProjectRejected,\r\n    getProjectError,\r\n    getHideProjectApi,\r\n\r\n    resHideProject,\r\n    hideProjectFulfilled,\r\n    hideProjectRejected,\r\n    hideProjectError,\r\n\r\n    resDisplayProject,\r\n    displayProjectFulfilled,\r\n    displayProjectRejected,\r\n    displayProjectError,\r\n\r\n    userId,\r\n\r\n    list,\r\n    setList,\r\n\r\n    hideList,\r\n    setHideList,\r\n  );\r\n\r\n  const handleHide = (id) => {\r\n    hideProjectFetchApi(userId, id);\r\n  };\r\n\r\n  const handleDisplay = (id) => {\r\n    displayProjectApi(userId, id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"display-projects\">\r\n        <Row xs=\"3\">\r\n          {list.map((value, index) => (\r\n            <Col key={index}>\r\n              <Button\r\n                className=\"hide-botton\"\r\n                onClick={() => handleHide(value.projectId)}\r\n              >\r\n                Hide\r\n              </Button>\r\n              <ProjectBox\r\n                data={value}\r\n                url={`/projectDetail/${value.projectId}`}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </div>\r\n\r\n      <div className=\"hidden-projects\">\r\n        <Row xs=\"3\">\r\n          {hideList.map((value, index) => (\r\n            <Col key={index}>\r\n              <Button\r\n                className=\"display-botton\"\r\n                onClick={() => handleDisplay(value.projectId)}\r\n              >\r\n                Display\r\n              </Button>\r\n              <ProjectBox\r\n                data={value}\r\n                url={`/projectDetail/${value.projectId}`}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModifyPlanProjects;\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\nimport { useRequest } from \"../../../../hook/useRequest\";\r\nimport ProjectBox from \"../../../Project/ProjectBox\";\r\nimport { runningProjectApi } from \"../../../../hook/api\";\r\nimport useProfileProject from \"../../../../hook/profile/useProfileProject\";\r\nimport \"../Profile.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setHideChange } from \"../../../../reducers/profile\";\r\n\r\nimport ModifyRunningProjects from \"./ModifyPlanProjects\";\r\n\r\nconst RunningProjects = ({ userId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const myId = useSelector((state) => state.login.userId);\r\n\r\n  const [hiding, setHiding] = useState(false);\r\n  const [list, setList] = useState([]);\r\n\r\n  const hideToggle = () => {\r\n    if (hiding) {\r\n      setHiding(false);\r\n      const reduxData = {\r\n        isHideChange: true,\r\n      };\r\n      dispatch(setHideChange(reduxData));\r\n    } else {\r\n      setHiding(true);\r\n      const reduxData = {\r\n        isHideChange: false,\r\n      };\r\n      dispatch(setHideChange(reduxData));\r\n    }\r\n  };\r\n  const { getProject } = runningProjectApi();\r\n\r\n  const [\r\n    {\r\n      data: resGetProject,\r\n      fulfilled: getProjectFulfilled,\r\n      pending: getProjectPending,\r\n      rejected: getProjectRejected,\r\n      error: getProjectError,\r\n    },\r\n    { run: getProjectApi },\r\n  ] = useRequest(getProject);\r\n\r\n  useProfileProject(\r\n    resGetProject,\r\n    getProjectFulfilled,\r\n    getProjectRejected,\r\n    getProjectError,\r\n    getProjectApi,\r\n\r\n    setList,\r\n    hiding,\r\n\r\n    userId,\r\n  );\r\n  return (\r\n    <div className=\"insideTab\">\r\n      {hiding ? (\r\n        <ModifyRunningProjects list={list} setList={setList} userId={userId} />\r\n      ) : getProjectPending ? (\r\n        <p>로딩중...</p>\r\n      ) : (\r\n        <Row xs=\"3\">\r\n          {list.map((value, index) => (\r\n            <Col key={index}>\r\n              <ProjectBox\r\n                data={value}\r\n                url={`/projectDetail/${value.projectId}`}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      )}\r\n      {myId === userId && (\r\n        <div>\r\n          <Button id=\"hide-toggle-button\" onClick={hideToggle}>\r\n            Hide\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RunningProjects;\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\nimport { useRequest } from \"../../../../hook/useRequest\";\r\nimport ProjectBox from \"../../../Project/ProjectBox\";\r\nimport { endedProjectApi, hideProjectApi } from \"../../../../hook/api\";\r\nimport useProfileProjectModify from \"../../../../hook/profile/useProfileProjectModify\";\r\nimport \"./profileProject.css\";\r\n\r\nconst ModifyEndedProjects = ({ list, setList, userId }) => {\r\n  const [hideList, setHideList] = useState([]);\r\n  const { getHideProject } = endedProjectApi();\r\n  const { hideProject, displayProject } = hideProjectApi();\r\n\r\n  const [\r\n    {\r\n      data: resGetProject,\r\n      fulfilled: getProjectFulfilled,\r\n      pending: getProjectPending,\r\n      rejected: getProjectRejected,\r\n      error: getProjectError,\r\n    },\r\n    { run: getHideProjectApi },\r\n  ] = useRequest(getHideProject);\r\n\r\n  const [\r\n    {\r\n      data: resHideProject,\r\n      fulfilled: hideProjectFulfilled,\r\n      pending: hideProjectPending,\r\n      rejected: hideProjectRejected,\r\n      error: hideProjectError,\r\n    },\r\n    { run: hideProjectFetchApi },\r\n  ] = useRequest(hideProject);\r\n\r\n  const [\r\n    {\r\n      data: resDisplayProject,\r\n      fulfilled: displayProjectFulfilled,\r\n      pending: displayProjectPending,\r\n      rejected: displayProjectRejected,\r\n      error: displayProjectError,\r\n    },\r\n    { run: displayProjectApi },\r\n  ] = useRequest(displayProject);\r\n\r\n  useProfileProjectModify(\r\n    resGetProject,\r\n    getProjectFulfilled,\r\n    getProjectRejected,\r\n    getProjectError,\r\n    getHideProjectApi,\r\n\r\n    resHideProject,\r\n    hideProjectFulfilled,\r\n    hideProjectRejected,\r\n    hideProjectError,\r\n\r\n    resDisplayProject,\r\n    displayProjectFulfilled,\r\n    displayProjectRejected,\r\n    displayProjectError,\r\n\r\n    userId,\r\n\r\n    list,\r\n    setList,\r\n\r\n    hideList,\r\n    setHideList,\r\n  );\r\n\r\n  const handleHide = (id) => {\r\n    hideProjectFetchApi(userId, id);\r\n  };\r\n\r\n  const handleDisplay = (id) => {\r\n    displayProjectApi(userId, id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"display-projects\">\r\n        <Row xs=\"3\">\r\n          {list.map((value, index) => (\r\n            <Col key={index}>\r\n              <Button\r\n                className=\"hide-botton\"\r\n                onClick={() => handleHide(value.projectId)}\r\n              >\r\n                Hide\r\n              </Button>\r\n              <ProjectBox\r\n                data={value}\r\n                url={`/projectDetail/${value.projectId}`}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </div>\r\n\r\n      <div className=\"hidden-projects\">\r\n        <Row xs=\"3\">\r\n          {hideList.map((value, index) => (\r\n            <Col key={index}>\r\n              <Button\r\n                className=\"display-botton\"\r\n                onClick={() => handleDisplay(value.projectId)}\r\n              >\r\n                Display\r\n              </Button>\r\n              <ProjectBox\r\n                data={value}\r\n                url={`/projectDetail/${value.projectId}`}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModifyEndedProjects;\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\nimport { useRequest } from \"../../../../hook/useRequest\";\r\nimport ProjectBox from \"../../../Project/ProjectBox\";\r\nimport { endedProjectApi } from \"../../../../hook/api\";\r\nimport useProfileProject from \"../../../../hook/profile/useProfileProject\";\r\nimport \"./profileProject.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setHideChange } from \"../../../../reducers/profile\";\r\n\r\nimport ModifyEndedProjects from \"./ModifyEndedProjects\";\r\n\r\nconst EndedProjects = ({ userId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const myId = useSelector((state) => state.login.userId);\r\n\r\n  const [hiding, setHiding] = useState(false);\r\n  const [list, setList] = useState([]);\r\n\r\n  const hideToggle = () => {\r\n    if (hiding) {\r\n      setHiding(false);\r\n      const reduxData = {\r\n        isHideChange: true,\r\n      };\r\n      dispatch(setHideChange(reduxData));\r\n    } else {\r\n      setHiding(true);\r\n      const reduxData = {\r\n        isHideChange: false,\r\n      };\r\n      dispatch(setHideChange(reduxData));\r\n    }\r\n  };\r\n\r\n  const { getProject } = endedProjectApi();\r\n\r\n  const [\r\n    {\r\n      data: resGetProject,\r\n      fulfilled: getProjectFulfilled,\r\n      pending: getProjectPending,\r\n      rejected: getProjectRejected,\r\n      error: getProjectError,\r\n    },\r\n    { run: getProjectApi },\r\n  ] = useRequest(getProject);\r\n\r\n  useProfileProject(\r\n    resGetProject,\r\n    getProjectFulfilled,\r\n    getProjectRejected,\r\n    getProjectError,\r\n    getProjectApi,\r\n\r\n    setList,\r\n    hiding,\r\n\r\n    userId,\r\n  );\r\n\r\n  return (\r\n    <div className=\"insideTab\">\r\n      {hiding ? (\r\n        <ModifyEndedProjects list={list} setList={setList} userId={userId} />\r\n      ) : getProjectPending ? (\r\n        <p>로딩중...</p>\r\n      ) : (\r\n        <Row xs=\"3\">\r\n          {list.map((value, index) => (\r\n            <Col key={index}>\r\n              <ProjectBox\r\n                data={value}\r\n                url={`/projectDetail/${value.projectId}`}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      )}\r\n      {myId === userId && (\r\n        <div>\r\n          <Button id=\"hide-toggle-button\" onClick={hideToggle}>\r\n            Hide\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EndedProjects;\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Button } from \"reactstrap\";\r\nimport { useRequest } from \"../../../../hook/useRequest\";\r\nimport ProjectBox from \"../../../Project/ProjectBox\";\r\nimport { planProjectApi } from \"../../../../hook/api\";\r\n// 잠시 ended 훅을 공유해서 써보자\r\nimport useProfileProject from \"../../../../hook/profile/useProfileProject\";\r\nimport \"../Profile.css\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setHideChange } from \"../../../../reducers/profile\";\r\n\r\nimport ModifyPlanProjects from \"./ModifyPlanProjects\";\r\n\r\nconst PlanProjects = ({ userId }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const myId = useSelector((state) => state.login.userId);\r\n\r\n  const [hiding, setHiding] = useState(false);\r\n  const [list, setList] = useState([]);\r\n\r\n  const hideToggle = () => {\r\n    if (hiding) {\r\n      setHiding(false);\r\n      const reduxData = {\r\n        isHideChange: true,\r\n      };\r\n      dispatch(setHideChange(reduxData));\r\n    } else {\r\n      setHiding(true);\r\n      const reduxData = {\r\n        isHideChange: false,\r\n      };\r\n      dispatch(setHideChange(reduxData));\r\n    }\r\n  };\r\n\r\n  const { getProject } = planProjectApi();\r\n\r\n  const [\r\n    {\r\n      data: resGetProject,\r\n      fulfilled: getProjectFulfilled,\r\n      pending: getProjectPending,\r\n      rejected: getProjectRejected,\r\n      error: getProjectError,\r\n    },\r\n    { run: getProjectApi },\r\n  ] = useRequest(getProject);\r\n\r\n  useProfileProject(\r\n    resGetProject,\r\n    getProjectFulfilled,\r\n    getProjectRejected,\r\n    getProjectError,\r\n    getProjectApi,\r\n\r\n    setList,\r\n    hiding,\r\n\r\n    userId,\r\n  );\r\n\r\n  return (\r\n    <div className=\"insideTab\">\r\n      {hiding ? (\r\n        <ModifyPlanProjects list={list} setList={setList} userId={userId} />\r\n      ) : getProjectPending ? (\r\n        <p>로딩중...</p>\r\n      ) : (\r\n        <Row xs=\"3\">\r\n          {list.map((value, index) => (\r\n            <Col key={index}>\r\n              <ProjectBox\r\n                data={value}\r\n                url={`/projectDetail/${value.projectId}`}\r\n              />\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      )}\r\n      {myId === userId && (\r\n        <div>\r\n          <Button id=\"hide-toggle-button\" onClick={hideToggle}>\r\n            Hide\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlanProjects;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useAlert from \"../useAlert\";\r\n\r\nconst useProfileRecruit = (\r\n  getProjectData,\r\n  getProjectFulfilled,\r\n  getProjectRejected,\r\n  getProjecsError,\r\n  getProjectApi,\r\n\r\n  postRecruitData,\r\n  postRecruitFulfilled,\r\n  postRecruitRejected,\r\n  postRecruitError,\r\n\r\n  toggleNested,\r\n  setNestedMessage,\r\n) => {\r\n  const [plannedProjects, setPlannedProjects] = useState([]);\r\n  const myId = useSelector((state) => state.login.userId);\r\n  const { alertAction } = useAlert();\r\n\r\n  useEffect(() => {\r\n    if (myId) {\r\n      getProjectApi(myId);\r\n    }\r\n  }, [myId]);\r\n\r\n  useEffect(() => {\r\n    if (getProjectFulfilled) {\r\n      // console.log(getProjectData);\r\n      setPlannedProjects(getProjectData);\r\n    }\r\n  }, [getProjectFulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (getProjectRejected) {\r\n      if (getProjecsError) {\r\n        alertAction.open(getProjecsError.response.data.message);\r\n        console.log(getProjecsError);\r\n      }\r\n    }\r\n  }, [getProjectRejected]);\r\n\r\n  useEffect(() => {\r\n    if (postRecruitFulfilled) {\r\n      setNestedMessage({\r\n        status: true,\r\n        message: \"영입 메시지를 성공적으로 전달했습니다!\",\r\n      });\r\n      toggleNested();\r\n    }\r\n  }, [postRecruitFulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (postRecruitRejected) {\r\n      if (postRecruitError) {\r\n        console.log(postRecruitError);\r\n        setNestedMessage({\r\n          status: false,\r\n          message: \"오류가 발생했습니다. 다시 시도해주세요.\",\r\n        });\r\n        toggleNested();\r\n      }\r\n    }\r\n  }, [postRecruitRejected]);\r\n  return { plannedProjects };\r\n};\r\n\r\nexport default useProfileRecruit;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { planProjectApi, sendRecruitPeopleApi } from \"../../../hook/api\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport \"./Profile.css\";\r\nimport { useRequest } from \"../../../hook\";\r\nimport useProfileRecruit from \"../../../hook/profile/useProfileRecruit\";\r\n\r\nconst RecruitModal = ({ modal, toggle, userId }) => {\r\n  // 내부 State\r\n  const [recruitState, setRecruitState] = useState({\r\n    introduction: \"\",\r\n    role: \"\",\r\n    projectId: \"\",\r\n  });\r\n\r\n  const [nestedModal, setNestedModal] = useState(false);\r\n  const [closeAll, setCloseAll] = useState(false);\r\n  const [nestedMessage, setNestedMessage] = useState({\r\n    status: false,\r\n    message: \"\",\r\n  });\r\n\r\n  // 내부 모달 띄우기\r\n  const toggleNested = () => {\r\n    setNestedModal(!nestedModal);\r\n    setCloseAll(false);\r\n  };\r\n\r\n  // Recruit 요청 실패시, 내부 모달창만 닫기 + 내부 state 유지\r\n  // Recruit 요청 성공시, 모든 모달창 닫기 + 내부 state 초기화\r\n  const toggleAll = () => {\r\n    setNestedModal(!nestedModal);\r\n    if (nestedMessage.status) {\r\n      setCloseAll(true);\r\n      setRecruitState({\r\n        introduction: \"\",\r\n        role: \"\",\r\n        projectId: \"\",\r\n      });\r\n    } else {\r\n      setCloseAll(false);\r\n    }\r\n  };\r\n\r\n  const { getAllPlannedProject } = planProjectApi();\r\n  const { postRecruit } = sendRecruitPeopleApi();\r\n\r\n  const [\r\n    {\r\n      data: getProjectData,\r\n      fulfilled: getProjectFulfilled,\r\n      pending: getProjectPending,\r\n      rejected: getProjectRejected,\r\n      error: getProjectError,\r\n    },\r\n    { run: getProjectApi },\r\n  ] = useRequest(getAllPlannedProject);\r\n\r\n  const [\r\n    {\r\n      data: postRecruitData,\r\n      fulfilled: postRecruitFulfilled,\r\n      pending: postRecruitPending,\r\n      rejected: postRecruitRejected,\r\n      error: postRecruitError,\r\n    },\r\n    { run: postRecruitApi },\r\n  ] = useRequest(postRecruit);\r\n\r\n  const { plannedProjects } = useProfileRecruit(\r\n    getProjectData,\r\n    getProjectFulfilled,\r\n    getProjectRejected,\r\n    getProjectError,\r\n    getProjectApi,\r\n\r\n    postRecruitData,\r\n    postRecruitFulfilled,\r\n    postRecruitRejected,\r\n    postRecruitError,\r\n\r\n    toggleNested,\r\n    setNestedMessage,\r\n  );\r\n\r\n  const handleChange = (event) => {\r\n    setRecruitState({\r\n      ...recruitState,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    postRecruitApi(userId, recruitState);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Modal title</ModalHeader>\r\n        <br />\r\n        <FormControl>\r\n          <InputLabel>프로젝트 선택</InputLabel>\r\n          <Select\r\n            value={recruitState.projectId}\r\n            name=\"projectId\"\r\n            onChange={handleChange}\r\n          >\r\n            {plannedProjects &&\r\n              plannedProjects.map((pj, index) => {\r\n                return (\r\n                  <MenuItem key={index} value={pj.projectId}>\r\n                    {pj.projectName}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n          </Select>\r\n        </FormControl>\r\n        <br />\r\n        <FormControl>\r\n          <InputLabel>제안할 역할</InputLabel>\r\n          <Select value={recruitState.role} name=\"role\" onChange={handleChange}>\r\n            <MenuItem value={\"DEVELOPER\"}>DEVELOPER</MenuItem>\r\n            <MenuItem value={\"DESIGNER\"}>DESIGNER</MenuItem>\r\n            <MenuItem value={\"LEADER\"}>LEADER</MenuItem>\r\n            <MenuItem value={\"ETC\"}>ETC</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <br />\r\n\r\n        <TextField\r\n          label=\"영입 제안 메시지를 입력하세요.\"\r\n          multiline\r\n          rows={4}\r\n          variant=\"outlined\"\r\n          name=\"introduction\"\r\n          value={recruitState.introduction}\r\n          onChange={handleChange}\r\n        />\r\n        <ModalFooter>\r\n          <Button color=\"primary\" onClick={handleSubmit}>\r\n            Send\r\n          </Button>\r\n          <Modal\r\n            isOpen={nestedModal}\r\n            toggle={toggleNested}\r\n            onClosed={closeAll ? toggle : undefined}\r\n          >\r\n            <ModalBody>{nestedMessage.message}</ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"secondary\" onClick={toggleAll}>\r\n                All Done\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n          <Button color=\"secondary\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecruitModal;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Row,\r\n  Col,\r\n  Badge,\r\n  Card,\r\n  CardText,\r\n} from \"reactstrap\";\r\nimport { useInvitationDetailEffect } from \"../../../../hook/profile/useInvitation\";\r\n\r\nconst DetailModal = ({ pid, userId, modal, toggle }) => {\r\n  const [nestedModal, setNestedModal] = useState(false);\r\n  const [closeAll, setCloseAll] = useState(false);\r\n\r\n  const toggleNested = () => {\r\n    setNestedModal(!nestedModal);\r\n    setCloseAll(false);\r\n  };\r\n  const toggleAll = () => {\r\n    setNestedModal(!nestedModal);\r\n    setCloseAll(true);\r\n  };\r\n\r\n  const [\r\n    { invitaionDetail, activityName },\r\n    { handleAccept, handleReject },\r\n  ] = useInvitationDetailEffect(userId, pid, toggleNested);\r\n\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>{invitaionDetail.projectName}</ModalHeader>\r\n\r\n        <ModalBody>\r\n          <Row xs=\"2\">\r\n            <Col>\r\n              <div>\r\n                <Badge color=\"info\" pill>\r\n                  {invitaionDetail.role}\r\n                </Badge>\r\n              </div>\r\n            </Col>\r\n            <Col>\r\n              <p> status : {invitaionDetail.state}</p>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Card body style={{ height: \"200px\" }}>\r\n            <CardText>{invitaionDetail.introduction}</CardText>\r\n          </Card>\r\n          <div> {invitaionDetail.userName}</div>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          {invitaionDetail.state === \"READ\" && (\r\n            <>\r\n              <Button color=\"primary\" onClick={handleAccept}>\r\n                Accept\r\n              </Button>\r\n              <Button color=\"danger\" onClick={handleReject}>\r\n                Reject\r\n              </Button>\r\n            </>\r\n          )}\r\n\r\n          <Modal\r\n            isOpen={nestedModal}\r\n            toggle={toggleNested}\r\n            onClosed={closeAll ? toggle : undefined}\r\n          >\r\n            <ModalHeader>Nested Modal title</ModalHeader>\r\n            <ModalBody>{activityName}이 완료되었습니다.</ModalBody>\r\n            <ModalFooter>\r\n              <Button color=\"secondary\" onClick={toggleAll}>\r\n                All Done\r\n              </Button>\r\n            </ModalFooter>\r\n          </Modal>\r\n\r\n          <Button color=\"secondary\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailModal;\r\n","import { useState, useEffect } from \"react\";\r\nimport { useRequest } from \"../useRequest\";\r\nimport { invitationListApi } from \"../api\";\r\nimport { invitationDetailApi } from \"../api\";\r\n\r\nexport const useInvitationEffect = (userId) => {\r\n  const [invitationList, setInvitationList] = useState([]);\r\n  const [noList, setNoList] = useState({ isError: false, errorMessage: \"\" });\r\n\r\n  const noticeNoList = (message) => {\r\n    setNoList({\r\n      isError: true,\r\n      errorMessage: message,\r\n    });\r\n  };\r\n\r\n  const { getInvitationList } = invitationListApi();\r\n\r\n  const [\r\n    { data, error, pending, fulfilled, rejected },\r\n    { run: getInvitationListApi },\r\n  ] = useRequest(getInvitationList);\r\n\r\n  useEffect(() => {\r\n    getInvitationListApi(userId);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (fulfilled) {\r\n      // 데이터가 있을 때\r\n      if (\"_embedded\" in data) {\r\n        setInvitationList(data._embedded.recruitDtoList);\r\n      }\r\n      // 데이터가 없을 때\r\n      else {\r\n        noticeNoList(\"초대 요청이 없습니다.\");\r\n      }\r\n    }\r\n  }, [fulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (rejected) {\r\n      if (error && error.response.data.error === \"105\") {\r\n        console.log(\"rej\");\r\n        noticeNoList(error.response.data.message);\r\n      }\r\n    }\r\n  }, [rejected]);\r\n\r\n  return { pending, invitationList, noList };\r\n};\r\n\r\nexport const useInvitationDetailEffect = (userId, pid, toggleNested) => {\r\n  const [invitaionDetail, setInvitaionDetail] = useState({\r\n    userName: \"\",\r\n    introduction: \"\",\r\n    role: \"\",\r\n    projectName: \"\",\r\n    state: \"\",\r\n  });\r\n  const [activityName, setActivityName] = useState(\"\");\r\n\r\n  const handleAccept = () => {\r\n    putInvitationAcceptApi(userId, pid);\r\n  };\r\n\r\n  const handleReject = () => {\r\n    deleteInvitationRejectApi(userId, pid);\r\n  };\r\n\r\n  const {\r\n    getInvitationDetail,\r\n    putInvitationAccept,\r\n    deleteInvitationReject,\r\n  } = invitationDetailApi();\r\n\r\n  const [\r\n    { data, error, pending, fulfilled, rejected },\r\n    { run: getInvitationDetailApi },\r\n  ] = useRequest(getInvitationDetail);\r\n\r\n  const [\r\n    {\r\n      data: putData,\r\n      error: putError,\r\n      pending: putPending,\r\n      fulfilled: putFulfilled,\r\n      reject: putRejected,\r\n    },\r\n    { run: putInvitationAcceptApi },\r\n  ] = useRequest(putInvitationAccept);\r\n\r\n  const [\r\n    {\r\n      data: deleteData,\r\n      error: deleteError,\r\n      pending: deletePending,\r\n      fulfilled: deleteFulfilled,\r\n      reject: deleteRejected,\r\n    },\r\n    { run: deleteInvitationRejectApi },\r\n  ] = useRequest(deleteInvitationReject);\r\n\r\n  useEffect(() => {\r\n    getInvitationDetailApi(userId, pid);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (fulfilled) {\r\n      setInvitaionDetail({\r\n        userName: data.userName,\r\n        introduction: data.introduction,\r\n        projectName: data.projectName,\r\n        role: data.role,\r\n        state: data.state,\r\n      });\r\n    }\r\n  }, [fulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (putFulfilled) {\r\n      setActivityName(\"수락\");\r\n      toggleNested();\r\n    }\r\n  }, [putFulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (deleteFulfilled) {\r\n      setActivityName(\"거절\");\r\n      toggleNested();\r\n    }\r\n  }, [deleteFulfilled]);\r\n\r\n  return [\r\n    {\r\n      invitaionDetail,\r\n      activityName,\r\n    },\r\n    {\r\n      handleAccept,\r\n      handleReject,\r\n    },\r\n  ];\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Card, CardTitle, CardText, Row, Col, Badge } from \"reactstrap\";\r\nimport DetailModal from \"./DetailModal\";\r\nconst InvitationBox = ({ data, userId }) => {\r\n  const [detailModal, setDetailModal] = useState(false);\r\n  const detailModalToggle = () => {\r\n    setDetailModal(!detailModal);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Card body onClick={detailModalToggle}>\r\n          <Row xs=\"4\">\r\n            <Col xs=\"8\">\r\n              <CardTitle>{data.projectName}</CardTitle>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Badge color=\"info\" pill>\r\n                {data.role}\r\n              </Badge>\r\n            </Col>\r\n          </Row>\r\n          <Row xs=\"4\">\r\n            <Col xs=\"9\">\r\n              <CardText>{data.introduction}</CardText>\r\n            </Col>\r\n\r\n            <Col>\r\n              <CardText>{data.userName}</CardText>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </div>\r\n      <div>\r\n        {detailModal && (\r\n          <DetailModal\r\n            pid={data.projectId}\r\n            userId={userId}\r\n            modal={detailModal}\r\n            toggle={detailModalToggle}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InvitationBox;\r\n","import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { useInvitationEffect } from \"../../../../hook/profile/useInvitation\";\r\nimport InvitationBox from \"./InvitationBox\";\r\nimport \"./Invitation.css\";\r\n\r\nconst InvitationModal = ({ modal, toggle, userId }) => {\r\n  const { pending, invitationList, noList } = useInvitationEffect(userId);\r\n  return (\r\n    <div>\r\n      <Modal isOpen={modal} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}> Invitations </ModalHeader>\r\n        <ModalBody>\r\n          {pending ? (\r\n            <div>로딩중...</div>\r\n          ) : noList.isError ? (\r\n            <div>{noList.errorMessage}</div>\r\n          ) : (\r\n            <div className=\"invitation_list\">\r\n              {invitationList.map((invitation, index) => {\r\n                return (\r\n                  <InvitationBox\r\n                    key={index}\r\n                    data={invitation}\r\n                    userId={userId}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"secondary\" onClick={toggle}>\r\n            Cancel\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InvitationModal;\r\n","import React, { useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { Layout, ProfileInfo, ProfileInfoModify } from \"../components\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Button\r\n} from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport RunningProjects from \"../components/People/Profile/ProfileProjects/RunningProjects\";\r\nimport EndedProjects from \"../components/People/Profile/ProfileProjects/EndedProjects\";\r\nimport PlanProjects from \"../components/People/Profile/ProfileProjects/PlanProjects\";\r\nimport RecruitModal from \"../components/People/Profile/RecruitModal\";\r\nimport InvitationModal from \"../components/People/Profile/Invitation/InvitationModal\";\r\n\r\nconst Profile = () => {\r\n  // url에서 userId 추출\r\n  const location = useLocation();\r\n  const url = location.pathname.split(\"/\");\r\n  const userId = url[2];\r\n\r\n  const myId = useSelector(state => state.login.userId);\r\n\r\n  // 컴포넌트 이동을 다룰 변수\r\n  const [modifying, setModifying] = useState(false);\r\n\r\n  // modify창 열고 닫을 토글\r\n  const modifyToggle = () => {\r\n    setModifying(!modifying);\r\n  };\r\n\r\n  const [invitationModal, setInvitationModal] = useState(false);\r\n\r\n  const invitationToggle = () => {\r\n    setInvitationModal(!invitationModal);\r\n  };\r\n\r\n  const [info, setInfo] = useState({\r\n    userName: \"\",\r\n    role: \"\",\r\n    stacks: [\"\"],\r\n    contact: \"\",\r\n    area: \"\",\r\n    grade: 0,\r\n    introduction: \"\"\r\n  });\r\n\r\n  const [imgState, setImgState] = useState({\r\n    imgUrl: \"\",\r\n    isImgChange: false\r\n  });\r\n\r\n  // Recruit modal\r\n  const [modal, setModal] = useState(false);\r\n  const recruitToggle = () => setModal(!modal);\r\n  // console.log(modal);\r\n\r\n  // 우측 탭 상태변수\r\n  const [activeTab, setActiveTab] = useState(\"1\");\r\n\r\n  // 탭 토글\r\n  const tabToggle = tab => {\r\n    if (activeTab !== tab) setActiveTab(tab);\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <br />\r\n      <Row xs=\"4\">\r\n        <Col>\r\n          {modifying ? (\r\n            <ProfileInfoModify\r\n              setModifying={modifyToggle}\r\n              info={info}\r\n              setInfo={setInfo}\r\n              imgState={imgState}\r\n              setImgState={setImgState}\r\n              userId={userId}\r\n            />\r\n          ) : (\r\n            <>\r\n              <ProfileInfo\r\n                setModifying={modifyToggle}\r\n                info={info}\r\n                setInfo={setInfo}\r\n                imgState={imgState}\r\n                setImgState={setImgState}\r\n                userId={userId}\r\n              />\r\n\r\n              {myId &&\r\n                (userId === myId ? (\r\n                  <>\r\n                    <Button id=\"modify-button\" onClick={modifyToggle}>\r\n                      Modify\r\n                    </Button>\r\n                    <Button\r\n                      id=\"see-invitation-button\"\r\n                      onClick={invitationToggle}\r\n                    >\r\n                      See Invitations\r\n                    </Button>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Button onClick={recruitToggle}> recruit </Button>\r\n                  </>\r\n                ))}\r\n              {modal && (\r\n                <RecruitModal\r\n                  modal={modal}\r\n                  toggle={recruitToggle}\r\n                  userId={userId}\r\n                />\r\n              )}\r\n              {invitationModal && (\r\n                <InvitationModal\r\n                  modal={invitationModal}\r\n                  toggle={invitationToggle}\r\n                  userId={userId}\r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n        </Col>\r\n        <Col xs=\"9\">\r\n          <div>\r\n            <Nav tabs>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({ active: activeTab === \"1\" })}\r\n                  onClick={() => {\r\n                    tabToggle(\"1\");\r\n                  }}\r\n                >\r\n                  Ended Projects\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({ active: activeTab === \"2\" })}\r\n                  onClick={() => {\r\n                    tabToggle(\"2\");\r\n                  }}\r\n                >\r\n                  Running Projects\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({ active: activeTab === \"3\" })}\r\n                  onClick={() => {\r\n                    tabToggle(\"3\");\r\n                  }}\r\n                >\r\n                  Plan Projects\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <EndedProjects userId={userId} />\r\n              </TabPane>\r\n\r\n              <TabPane tabId=\"2\">\r\n                <RunningProjects userId={userId} />\r\n              </TabPane>\r\n\r\n              <TabPane tabId=\"3\">\r\n                <PlanProjects userId={userId} />\r\n              </TabPane>\r\n            </TabContent>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"sourceRoot":""}