{"version":3,"sources":["../node_modules/@material-ui/core/esm/Typography/Typography.js","../node_modules/@material-ui/core/esm/utils/createSvgIcon.js","hook/peopleTs/usePeopleListTs.ts","pages/rootTs.tsx"],"names":["defaultVariantMapping","h1","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","Typography","React","props","ref","_props$align","align","classes","className","_props$color","color","component","_props$display","display","_props$gutterBottom","gutterBottom","_props$noWrap","noWrap","_props$paragraph","paragraph","_props$variant","variant","_props$variantMapping","variantMapping","other","_objectWithoutProperties","Component","_extends","clsx","root","concat","capitalize","withStyles","theme","margin","typography","caption","button","overline","srOnly","position","height","width","overflow","alignLeft","textAlign","alignCenter","alignRight","alignJustify","textOverflow","whiteSpace","marginBottom","colorInherit","colorPrimary","palette","primary","main","colorSecondary","secondary","colorTextPrimary","text","colorTextSecondary","colorError","error","displayInline","displayBlock","name","createSvgIcon","path","displayName","createElement","SvgIcon","muiName","memo","forwardRef","require","usePeopleListStateTs","useState","peopleList","setPeopleList","number","size","totalElements","totalPages","page","setPage","role","setRole","region","setRegion","grade","setGrade","search","setSearch","useRequest","peopleListApi","getPeopleList","peopleListPromise","run","getWantedPeopleList","peoplePage","WantedPeopleListPromise","peopleAction","useWantedPeopleListEffectTs","useAlert","alertAction","useEffect","fulfilled","data","_embedded","rejected","useStyles","makeStyles","pagination","marginTop","spacing","justifyContent","Root","useProjectListStateTs","projectPage","projectAction","useDeadlineProjectListEffect","container","projectList","map","item","idx","xs","key","url","projectId","id","onChange","e","getDeadLineProjectListApi","count","userId","style"],"mappings":"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","file":"static/js/10.2fd60919.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport capitalize from '../utils/capitalize';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      margin: 0\n    },\n\n    /* Styles applied to the root element if `variant=\"body2\"`. */\n    body2: theme.typography.body2,\n\n    /* Styles applied to the root element if `variant=\"body1\"`. */\n    body1: theme.typography.body1,\n\n    /* Styles applied to the root element if `variant=\"caption\"`. */\n    caption: theme.typography.caption,\n\n    /* Styles applied to the root element if `variant=\"button\"`. */\n    button: theme.typography.button,\n\n    /* Styles applied to the root element if `variant=\"h1\"`. */\n    h1: theme.typography.h1,\n\n    /* Styles applied to the root element if `variant=\"h2\"`. */\n    h2: theme.typography.h2,\n\n    /* Styles applied to the root element if `variant=\"h3\"`. */\n    h3: theme.typography.h3,\n\n    /* Styles applied to the root element if `variant=\"h4\"`. */\n    h4: theme.typography.h4,\n\n    /* Styles applied to the root element if `variant=\"h5\"`. */\n    h5: theme.typography.h5,\n\n    /* Styles applied to the root element if `variant=\"h6\"`. */\n    h6: theme.typography.h6,\n\n    /* Styles applied to the root element if `variant=\"subtitle1\"`. */\n    subtitle1: theme.typography.subtitle1,\n\n    /* Styles applied to the root element if `variant=\"subtitle2\"`. */\n    subtitle2: theme.typography.subtitle2,\n\n    /* Styles applied to the root element if `variant=\"overline\"`. */\n    overline: theme.typography.overline,\n\n    /* Styles applied to the root element if `variant=\"srOnly\"`. Only accessible to screen readers. */\n    srOnly: {\n      position: 'absolute',\n      height: 1,\n      width: 1,\n      overflow: 'hidden'\n    },\n\n    /* Styles applied to the root element if `align=\"left\"`. */\n    alignLeft: {\n      textAlign: 'left'\n    },\n\n    /* Styles applied to the root element if `align=\"center\"`. */\n    alignCenter: {\n      textAlign: 'center'\n    },\n\n    /* Styles applied to the root element if `align=\"right\"`. */\n    alignRight: {\n      textAlign: 'right'\n    },\n\n    /* Styles applied to the root element if `align=\"justify\"`. */\n    alignJustify: {\n      textAlign: 'justify'\n    },\n\n    /* Styles applied to the root element if `nowrap={true}`. */\n    noWrap: {\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap'\n    },\n\n    /* Styles applied to the root element if `gutterBottom={true}`. */\n    gutterBottom: {\n      marginBottom: '0.35em'\n    },\n\n    /* Styles applied to the root element if `paragraph={true}`. */\n    paragraph: {\n      marginBottom: 16\n    },\n\n    /* Styles applied to the root element if `color=\"inherit\"`. */\n    colorInherit: {\n      color: 'inherit'\n    },\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      color: theme.palette.primary.main\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      color: theme.palette.secondary.main\n    },\n\n    /* Styles applied to the root element if `color=\"textPrimary\"`. */\n    colorTextPrimary: {\n      color: theme.palette.text.primary\n    },\n\n    /* Styles applied to the root element if `color=\"textSecondary\"`. */\n    colorTextSecondary: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Styles applied to the root element if `color=\"error\"`. */\n    colorError: {\n      color: theme.palette.error.main\n    },\n\n    /* Styles applied to the root element if `display=\"inline\"`. */\n    displayInline: {\n      display: 'inline'\n    },\n\n    /* Styles applied to the root element if `display=\"block\"`. */\n    displayBlock: {\n      display: 'block'\n    }\n  };\n};\nvar defaultVariantMapping = {\n  h1: 'h1',\n  h2: 'h2',\n  h3: 'h3',\n  h4: 'h4',\n  h5: 'h5',\n  h6: 'h6',\n  subtitle1: 'h6',\n  subtitle2: 'h6',\n  body1: 'p',\n  body2: 'p'\n};\nvar Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {\n  var _props$align = props.align,\n      align = _props$align === void 0 ? 'inherit' : _props$align,\n      classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'initial' : _props$color,\n      component = props.component,\n      _props$display = props.display,\n      display = _props$display === void 0 ? 'initial' : _props$display,\n      _props$gutterBottom = props.gutterBottom,\n      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,\n      _props$noWrap = props.noWrap,\n      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,\n      _props$paragraph = props.paragraph,\n      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'body1' : _props$variant,\n      _props$variantMapping = props.variantMapping,\n      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,\n      other = _objectWithoutProperties(props, [\"align\", \"classes\", \"className\", \"color\", \"component\", \"display\", \"gutterBottom\", \"noWrap\", \"paragraph\", \"variant\", \"variantMapping\"]);\n\n  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes[\"color\".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes[\"align\".concat(capitalize(align))], display !== 'initial' && classes[\"display\".concat(capitalize(display))]),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Typography.propTypes = {\n  /**\n   * Set the text-align on the component.\n   */\n  align: PropTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   * Overrides the behavior of the `variantMapping` prop.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Controls the display type\n   */\n  display: PropTypes.oneOf(['initial', 'block', 'inline']),\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  gutterBottom: PropTypes.bool,\n\n  /**\n   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.\n   *\n   * Note that text overflow can only happen with block or inline-block level elements\n   * (the element needs to have a width in order to overflow).\n   */\n  noWrap: PropTypes.bool,\n\n  /**\n   * If `true`, the text will have a bottom margin.\n   */\n  paragraph: PropTypes.bool,\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),\n\n  /**\n   * The component maps the variant prop to a range of different HTML element types.\n   * For instance, subtitle1 to `<h6>`.\n   * If you wish to change that mapping, you can provide your own.\n   * Alternatively, you can use the `component` prop.\n   */\n  variantMapping: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTypography'\n})(Typography);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport SvgIcon from '../SvgIcon';\n/**\n * Private module reserved for @material-ui/x packages.\n */\n\nexport default function createSvgIcon(path, displayName) {\n  var Component = function Component(props, ref) {\n    return /*#__PURE__*/React.createElement(SvgIcon, _extends({\n      ref: ref\n    }, props), path);\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    // Need to set `displayName` on the inner component for React.memo.\n    // React prior to 16.14 ignores `displayName` on the wrapper.\n    Component.displayName = \"\".concat(displayName, \"Icon\");\n  }\n\n  Component.muiName = SvgIcon.muiName;\n  return /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(Component));\n}","import { Dispatch, SetStateAction, useEffect, useState } from \"react\";\r\nimport { peopleListApi } from \"../api\";\r\nimport { useRequest, useAlert } from \"..\";\r\nimport { RequestState } from \"../useRequest\";\r\nconst axios = require(\"axios\");\r\n\r\ntype pageType = {\r\n  number: number;\r\n  size: number;\r\n  totalElements: number;\r\n  totalPages: number;\r\n};\r\n\r\ntype peopleListType = {\r\n  userId: String;\r\n  userName: String;\r\n  stacks: Array<String>;\r\n  area: String;\r\n  level: number;\r\n  _links: {\r\n    self: {\r\n      href: String;\r\n    };\r\n    profileImage: {\r\n      href: String;\r\n    };\r\n  };\r\n};\r\n\r\ntype peoplePage = {\r\n  WantedPeopleListPromise: RequestState;\r\n  peopleListPromise: RequestState;\r\n  peopleList: peopleListType[];\r\n  role: string;\r\n  region: string;\r\n  search: string;\r\n  page: pageType;\r\n  grade: string;\r\n};\r\n\r\ntype peopleAction = {\r\n  getPeopleList: (pageNumber: number, params: Object[]) => Promise<void>;\r\n  getWantedPeopleList: (pageNumber: number) => Promise<void>;\r\n  setPeopleList: Dispatch<SetStateAction<peopleListType[]>>;\r\n  setPage: Dispatch<SetStateAction<pageType>>;\r\n  setRole: Dispatch<SetStateAction<string>>;\r\n  setRegion: Dispatch<SetStateAction<string>>;\r\n  setSearch: Dispatch<SetStateAction<string>>;\r\n  setGrade: Dispatch<SetStateAction<string>>;\r\n};\r\n\r\ntype peopleState = {\r\n  peoplePage: peoplePage;\r\n  peopleAction: peopleAction;\r\n};\r\n\r\nexport function usePeopleListStateTs(): peopleState {\r\n  const [peopleList, setPeopleList] = useState<peopleListType[] | []>([]);\r\n  const [page, setPage] = useState<pageType>({\r\n    number: 0,\r\n    size: 0,\r\n    totalElements: 0,\r\n    totalPages: 0,\r\n  });\r\n  const [role, setRole] = useState<string>(\"\");\r\n  const [region, setRegion] = useState<string>(\"\");\r\n  const [grade, setGrade] = useState<string>(\"\");\r\n  const [search, setSearch] = useState<string>(\"\");\r\n  const [peopleListPromise, { run: getPeopleList }] = useRequest(\r\n    peopleListApi().getPeopleList,\r\n  );\r\n\r\n  const [WantedPeopleListPromise, { run: getWantedPeopleList }] = useRequest(\r\n    peopleListApi().getWantedPeopleList,\r\n  );\r\n  const peoplePage: peoplePage = {\r\n    WantedPeopleListPromise,\r\n    peopleListPromise,\r\n    peopleList,\r\n    page,\r\n    role,\r\n    region,\r\n    search,\r\n    grade,\r\n  };\r\n\r\n  const peopleAction: peopleAction = {\r\n    setPeopleList,\r\n    setPage,\r\n    setRole,\r\n    setRegion,\r\n    setSearch,\r\n    setGrade,\r\n    getPeopleList,\r\n    getWantedPeopleList,\r\n  };\r\n\r\n  return { peoplePage, peopleAction };\r\n}\r\n\r\nexport function usePeopleListEffectTs(\r\n  peoplePage: peoplePage,\r\n  peopleAction: peopleAction,\r\n) {\r\n  useEffect(() => {\r\n    if (peoplePage.peopleListPromise.fulfilled) {\r\n      if (\"_embedded\" in peoplePage.peopleListPromise.data) {\r\n        peopleAction.setPeopleList(\r\n          peoplePage.peopleListPromise.data._embedded.peopleList,\r\n        );\r\n      }\r\n    }\r\n  }, [peoplePage.peopleListPromise.fulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (peoplePage.peopleListPromise.rejected) {\r\n      if (peoplePage.peopleListPromise.error) {\r\n        peopleAction.setPeopleList([]);\r\n      }\r\n    }\r\n  }, [peoplePage.peopleListPromise.rejected]);\r\n}\r\n\r\nexport function useWantedPeopleListEffectTs(\r\n  peoplePage: peoplePage,\r\n  peopleAction: peopleAction,\r\n) {\r\n  const { alertAction } = useAlert();\r\n  useEffect(() => {\r\n    if (peoplePage.WantedPeopleListPromise.fulfilled) {\r\n      if (\"_embedded\" in peoplePage.WantedPeopleListPromise.data) {\r\n        peopleAction.setPeopleList(\r\n          peoplePage.WantedPeopleListPromise.data._embedded.peopleList,\r\n        );\r\n      }\r\n    }\r\n  }, [peoplePage.WantedPeopleListPromise.fulfilled]);\r\n\r\n  useEffect(() => {\r\n    if (peoplePage.WantedPeopleListPromise.rejected) {\r\n      if (peoplePage.WantedPeopleListPromise.error) {\r\n        peopleAction.setPeopleList([]);\r\n      }\r\n    }\r\n  }, [peoplePage.WantedPeopleListPromise.rejected]);\r\n\r\n  useEffect(() => {\r\n    peopleAction.getWantedPeopleList(0);\r\n  }, []);\r\n}\r\n","import React from \"react\";\r\nimport { Layout, ProjectBox, PeopleBox, Jumbotron } from \"../components\";\r\nimport {\r\n  useProjectListStateTs,\r\n  useDeadlineProjectListEffect,\r\n} from \"../hook/projectTs\";\r\nimport {\r\n  usePeopleListStateTs,\r\n  useWantedPeopleListEffectTs,\r\n} from \"../hook/peopleTs\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pagination: {\r\n    \"& > *\": {\r\n      marginTop: theme.spacing(2),\r\n      justifyContent: \"center\",\r\n      display: \"flex\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Root() {\r\n  const classes = useStyles();\r\n  const { projectPage, projectAction } = useProjectListStateTs();\r\n  useDeadlineProjectListEffect(projectPage, projectAction);\r\n\r\n  const { peoplePage, peopleAction } = usePeopleListStateTs();\r\n  useWantedPeopleListEffectTs(peoplePage, peopleAction);\r\n\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <Jumbotron />\r\n        <Typography variant=\"h5\">마감임박 프로젝트 </Typography>\r\n        <Grid container spacing={3}>\r\n          {projectPage.projectList.map((item, idx) => {\r\n            return (\r\n              <Grid item xs={3} key={idx}>\r\n                <ProjectBox\r\n                  data={item}\r\n                  url={`/projectDetail/${item.projectId}`}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n        <div id=\"pagination_div\">\r\n          <Pagination\r\n            className={classes.pagination}\r\n            onChange={(e, page: number) => {\r\n              projectAction.setPage({ ...projectPage.page, number: page });\r\n              projectAction.getDeadLineProjectListApi(page - 1);\r\n            }}\r\n            page={projectPage.page.number + 1}\r\n            count={projectPage.page.totalPages}\r\n          />\r\n        </div>\r\n        <Typography variant=\"h5\">프로젝트를 찾는 사람들</Typography>\r\n        <Grid container spacing={3} >\r\n          {peoplePage.peopleList.map((item, idx) => {\r\n            return (\r\n              <Grid item xs={2} key={idx}>\r\n                <PeopleBox data={item} url={`/profile/${item.userId}`} />\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n        <div id=\"pagination_div\" style={{ marginTop: \"30px\" }}>\r\n          <Pagination\r\n            className={classes.pagination}\r\n            onChange={(e, page: number) => {\r\n              projectAction.setPage({ ...projectPage.page, number: page });\r\n              peopleAction.getWantedPeopleList(page - 1);\r\n            }}\r\n            page={peoplePage.page.number + 1}\r\n            count={peoplePage.page.totalPages}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n}\r\n"],"sourceRoot":""}